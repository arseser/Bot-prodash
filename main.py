import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = "8408479958:AAGqhaY6KgG0FWN0s2VYc6-BmONfDATGieQ"
ADMIN_ID = 7867021596

# –¶–µ–Ω—ã
SELL_PRICE = 150
BUY_PRICE = 50

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤
active_chats = {}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    keyboard = [
        [InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –ø–∞–∫", callback_data="buy_pack")],
        [InlineKeyboardButton("üí∏ –ü—Ä–æ–¥–∞—Ç—å –ø–∞–∫", callback_data="sell_pack")],
        [InlineKeyboardButton("üìä –¶–µ–Ω—ã", callback_data="prices")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    user_name = query.from_user.username or query.from_user.first_name
    
    if query.data == "buy_pack":
        active_chats[user_id] = {"type": "buy", "admin_notified": False}
        
        await query.edit_message_text(
            f"üõí –í—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –ø–∞–∫ –∑–∞ {SELL_PRICE}‚ÇΩ\n\n"
            "–°–æ–∑–¥–∞–Ω –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞...\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel"
        )
        
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"üõí –ù–û–í–´–ô –ó–ê–ö–ê–ó –ù–ê –ü–û–ö–£–ü–ö–£\n\n"
                 f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}\n"
                 f"ID: {user_id}\n"
                 f"–°—É–º–º–∞: {SELL_PRICE}‚ÇΩ\n\n"
                 f"–û—Ç–≤–µ—Ç—å—Ç–µ —ç—Ç–æ–º—É –±–æ—Ç—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º."
        )
        
    elif query.data == "sell_pack":
        active_chats[user_id] = {"type": "sell", "admin_notified": False}
        
        await query.edit_message_text(
            f"üí∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å –ø–∞–∫ –∑–∞ {BUY_PRICE}‚ÇΩ\n\n"
            "–°–æ–∑–¥–∞–Ω –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞...\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel"
        )
        
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"üí∏ –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï –û –ü–†–û–î–ê–ñ–ï\n\n"
                 f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}\n"
                 f"ID: {user_id}\n"
                 f"–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è —Ü–µ–Ω–∞: {BUY_PRICE}‚ÇΩ\n\n"
                 f"–û—Ç–≤–µ—Ç—å—Ç–µ —ç—Ç–æ–º—É –±–æ—Ç—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º."
        )
        
    elif query.data == "prices":
        await query.edit_message_text(
            f"üìä –¢–ï–ö–£–©–ò–ï –¶–ï–ù–´:\n\n"
            f"üí∞ –ü–æ–∫—É–ø–∫–∞ —É –Ω–∞—Å: {SELL_PRICE}‚ÇΩ –∑–∞ –ø–∞–∫\n"
            f"üí∏ –ü—Ä–æ–¥–∞–∂–∞ –Ω–∞–º: {BUY_PRICE}‚ÇΩ –∑–∞ –ø–∞–∫\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –ø–∞–∫", callback_data="buy_pack")],
                [InlineKeyboardButton("üí∏ –ü—Ä–æ–¥–∞—Ç—å –ø–∞–∫", callback_data="sell_pack")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ])
        )
    
    elif query.data == "back_to_main":
        keyboard = [
            [InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –ø–∞–∫", callback_data="buy_pack")],
            [InlineKeyboardButton("üí∏ –ü—Ä–æ–¥–∞—Ç—å –ø–∞–∫", callback_data="sell_pack")],
            [InlineKeyboardButton("üìä –¶–µ–Ω—ã", callback_data="prices")]
        ]
        await query.edit_message_text(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã —á–∞—Ç–∞"""
    user_id = update.message.from_user.id
    
    if user_id in active_chats:
        chat_type = active_chats[user_id]["type"]
        del active_chats[user_id]
        
        type_text = "–ø–æ–∫—É–ø–∫–∏" if chat_type == "buy" else "–ø—Ä–æ–¥–∞–∂–∏"
        await update.message.reply_text(f"‚ùå –ß–∞—Ç –¥–ª—è {type_text} –æ—Ç–º–µ–Ω–µ–Ω.")
        
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª —á–∞—Ç {type_text}."
        )
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤.")

async def handle_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ"""
    user_id = update.message.from_user.id
    
    if user_id in active_chats:
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"üë§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n\n{update.message.text}"
        )
        await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
    else:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

async def handle_admin_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if update.message.from_user.id != ADMIN_ID:
        return
    
    if update.message.reply_to_message:
        original_text = update.message.reply_to_message.text
        
        if "ID:" in original_text:
            lines = original_text.split('\n')
            for line in lines:
                if line.startswith("ID:"):
                    user_id = int(line.split(":")[1].strip())
                    
                    try:
                        await context.bot.send_message(
                            chat_id=user_id,
                            text=f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{update.message.text}"
                        )
                        await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
                    except Exception as e:
                        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
                    break

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("cancel", cancel))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_user_message))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(".*"), handle_admin_message))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == "__main__":
    main()
